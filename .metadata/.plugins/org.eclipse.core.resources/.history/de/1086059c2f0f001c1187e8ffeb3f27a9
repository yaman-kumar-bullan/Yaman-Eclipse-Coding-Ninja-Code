package codingNinjas;
import java.util.*;
public class Recurssion {
	
	public static int factorial(int n) {
		if(n==0) return 1;                    //Base case
		return n*factorial(n-1);                //If somehow we get the factorial of n-1
	}
	
	public static int sum(int n) {
		if(n==1) return 1;
		return n + sum(n-1);     //If somehow we get the sum of n-1 natural numbers
	}
	
	public static int power(int x, int n) { //Finding x^n
		if(n==0) return 1;
		return x * power(x,n-1);
	}
	
	public static int fastPower(int a, int n) {
		if(n==0) return 1;
		
		if(n%2==0) return fastPower(a*a,n/2);
		else return a * fastPower(a,n-1);
	}
	
	static int i =  0;
	
	public static void printUptoNInIncreasingOrder(int n) {   //I need to revise it
		if(n>=1) {
			printUptoNInIncreasingOrder(n-1);
			System.out.println(n);
		}
	}

	public static int noOfDigits(int n) {
		if(n/10==0) {
			return 1;
		}
		
		return 1 + noOfDigits(n/10);
	}
	
	public static int fib(int n) {   //Here we need to have two base cases because we are dealing with two different instances of the function
		if(n==1) {                          
			return 0;
		}
		if(n==2) {
			return 1;
		}
		
		return fib(n-1) + fib(n-2);
	}
	
	public static boolean checkSorted(int[] input) {
		if(input.length <= 1) return true;
		
		int[] smallArray = new int[input.length-1];
		for(int i=1; i<input.length; i++) {
			smallArray[i-1] = input[i];
		}
		
		boolean smallAns = checkSorted(smallArray);
		
		if(smallAns) {
			if(input[0] <= smallArray[0]) return true;
			else return false;
		} else return false;
	}
	
	/* 
	 * Stack Overflow Error is when our storage to save function is filled and our function is getting called infinite times
	 */
	
	/*
	 * When one fun calls other it gets in paused state until it gets the called answer
	 * And in case of recursion all the called functions are stored separately
	 */
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int[] arr = {1,2,3,4,5};
		
		System.out.println(checkSorted(arr));
		
		sc.close();
	}
}
